* Spring MVC Form Tags
	Spring Mvc Form Tags are the building blick for a web page
	Form Tags are configurable are reuseable for a web page
---------------------------------
* Data Binding
	Spring Mvc Form Tags can make use of data binding	
	Automatically setting / retriving data from a Java object / bean
---------------------------------
* Form tags will generate HTML for you
	form:form	main form container
	form:input	text field
	form:textarea	multi-line text field
---------------------------------
* 
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>

---------------------------------
* Showing Form
	In your Spring Controller
	Before you show the form, you must add a **model attribute**
	This is a bean that will hold form data for the **data binding**
---------------------------------
* Behind the scenes: the object is populated with form data
---------------------------------
* Development Process step by step
1. Create Student class
2. Create Student controller class
3. Create html form
4. Create form processing code
5. Create confirmation page
---------------------------------
* When form is **submitted**, spring mvc will call
student.setFirstName(...)
student.setLastName(...)
---------------------------------
* When form is **loaded**, spring mvc will call
student.getFirstName()
student.getLastName()
---------------------------------

This solution will show you how to place the country options in a properties file. The values will no longer be hard coded in the Java code.

1. Create a properties file to hold the countries. It will be a name value pair.  Country code is name. Country name is the value.

New text file:  WEB-INF/countries.properties

BR=Brazil 
FR=France 
CO=Colombia 
IN=India
Note the location of the properties file is very important. It must be stored in WEB-INF/countries.properties

2. Update header section for Spring config file

We are going to use a new set of Spring tags for <util>. As a result, you need to update the header information in the Spring config file.

File: spring-mvc-dmo-servlet.xml
Remove the previous header and add this.

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
        xmlns:context="http://www.springframework.org/schema/context" 
        xmlns:mvc="http://www.springframework.org/schema/mvc" 
        xmlns:util="http://www.springframework.org/schema/util" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:schemaLocation="
            http://www.springframework.org/schema/beans     
            http://www.springframework.org/schema/beans/spring-beans.xsd     
            http://www.springframework.org/schema/context     
            http://www.springframework.org/schema/context/spring-context.xsd     
            http://www.springframework.org/schema/mvc         
            http://www.springframework.org/schema/mvc/spring-mvc.xsd 
            http://www.springframework.org/schema/util     
            http://www.springframework.org/schema/util/spring-util.xsd">
3. Load the country options properties file in the Spring config file. Bean id: countryOptions

File: spring-mvc-dmo-servlet.xml

Add the following lines:

<util:properties  id="countryOptions" location="classpath:../countries.properties" /> 

4.1 In StudentController.java, add the following import statement:

import java.util.Map;
4.2 Inject the properties values into your Spring Controller: StudentController.java

@Value("#{countryOptions}") 
private Map<String, String> countryOptions;
5. Add the country options to the Spring MVC model. Attribute name: theCountryOptions

@RequestMapping("/showForm") 
public String showForm(Model theModel) { 
 
    // create a student object Student 
    Student theStudent = new Student();
 
    // add student object to the model 
    theModel.addAttribute("student", theStudent); 
 
    // add the country options to the model 
    theModel.addAttribute("theCountryOptions", countryOptions); 
 
    return "student-form"; 
}
6. Update the JSP page, student-form.jsp, to use the new model attribute for the drop-down list: theCountryOptions

<form:select path="country"> 
 <form:options items="${theCountryOptions}" />
</form:select>
7. Remove all references to country option from your Student.java.  

---