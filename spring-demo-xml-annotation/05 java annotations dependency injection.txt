1. Spring Dependency Injection with Annotations and Autowiring
***Simply give: @Autowired
Add @Component annotation... so Spring can register it.
-------------------------------------------------------------
* What is Spring AutoWiring?
	1. For dependency injection, Spring can use auto wiring
	2. Spring will look for a class that _matches the property
	_matches by type: class or interface
	3. Spring will inject it automatically... hence it is autowired  
-------------------------------------------------------------
* Autowiring Example
	1. Injecting FortuneService into a Coach implementation
	2. Spring will scan @Components
	3. Any one implements IFotuneService interface???
	4. If so, let's inject them. For example: HappyFortuneService
-------------------------------------------------------------
* Autowiring Injection Types
	1. Constructor Injection
	2. Setter Injection
	3. Field Injection
call method
-------------------------------------------------------------
* Development Process - Constructor Injection
	1. Define the dependency interface and class
	2. Create a constructor in your class for injections
	3. Configure the dependency injection with **@Autowired** Anotation
-------------------------------------------------------------
* Multiple Implementations?
AUTOWIRING

FAQ: What if there are multiple FortuneService implementations?

When using autowiring, what if there are multiple FortuneService implementations?
---

ANSWER

Spring has special support to handle this case. Use the @Qualifier annotation. 
We'll cover this later in the course with slides and code examples. But don't worry, we will address all scenarios :-)

@Autowired
@Quanlifier("happyFortuneService")
private IFortuneService fortuneService;

-------------------------------------------------------------
* Annotations - Default Bean Names ... and the Special Case
	In general, when using Annotations, for the default bean name, Spring uses the following rule.
	If the annotation's value doesn't indicate a bean name, an appropriate name will be built based on the short name of the 	class (with the first letter lower-cased).

For example:

HappyFortuneService --> happyFortuneService

---
However, for the special case of when BOTH the first and second characters of the class name are upper case, then the name is NOT converted.
For the case of RESTFortuneService

RESTFortuneService --> RESTFortuneService

No conversion since the first two characters are upper case.
As always, you can give explicity names to your beans.

@Component("foo")
public class RESTFortuneService .... {
    
}
Then you can access it using the name of "foo". Nothing tricky to worry about :-)
-------------------------------------------------------------
* @Qualifier is a nice feature, but it is tricky when used with Constructors.
make use of constructor injection, with @Autowired and @Qualifier. Make note of the code in bold below:

    private IFortuneService fortuneService;
    
    @Autowired
    public TennisCoach(@Qualifier("randomFortuneService") FortuneService theFortuneService) {

        System.out.println(">> TennisCoach: inside constructor using @autowired and @qualifier");
        
        fortuneService = theFortuneService;
    }

----------------------------------------------------------------
FAQ: How to inject properties file using Java annotations

1. Create a properties file to hold your properties. It will be a name value pair.  

New text file:  src/sport.properties

foo.email=myeasycoach@luv2code.com
foo.team=Silly Java Coders

2. Load the properties file in the XML config file.

File: applicationContext.xml

Add the following lines:

    <context:property-placeholder location="classpath:sport.properties"/> 
 
This should appear just after the <context:component-scan .../> line

3. Inject the properties values into your Swim Coach: SwimCoach.java

@Value("${foo.email}")
private String email;
    
@Value("${foo.team}")
private String team;
