1. Bean Scopes
	* Scope refers to the lifecycle of a bean
	* How long does the bean live?
	* How may instances are created?
	* How is the bean shared?
So by default, the scope is singleton.
---------------------------------------------
* What is a Singleton?
	1. Spring container creates only one instance of the bean, by default
	2. It is cached in memory
	3. All request for the bean
	* will return a SHARED reference to the SAME bean
---------------------------------------------
* Additional Spring Bean Scopes
	1. singleton (create a single shared instance of the bean)
	2. prototype (create a new bean instance for each container request)
	2. request, session, global-session (only used for web apps)
---------------------------------------------
* Bean Lifecycle
Container started -> Bean instantiated -> Dependencies Injected -> Internal Spring Processing 
-> Your Custom Init Method -> Bean Is ready for use/Container Is Shutdown
-> Your Custom Destroy Method -> Stop
------------------------------------------------------
* Bean Licycle Methods / Hooks
	1. You can add custom code during ***bean initalization
	init-method="doMyStartupStuff"
	2. Calling custom business logic methods
	3. Setting up handles to resources (db, socket, file, etc)
	1. You can add custom code during ***bean destruction
	destroy-method="doMyCleanupStuff"
	2. Calling custom business logic method
	3. Clean up handles to resources (db, socket, file, etc)
------------------------------------------------
* Development Process
	1. Define you methods for init and destroy
	2. Configure the method names in Spring config file
------------------------------------------------------
* Special Note about init and destroy Method Signatures

When using XML configuration, I want to provide additional details regarding the method signatures of the init-method  and destroy-method .

* Access modifier
The method can have any access modifier (public, protected, private)

* Return type
The method can have any return type. However, "void' is most commonly used. If you give a return type just note that you will not be able to capture the return value. As a result, "void" is commonly used.

* Method name
The method can have any method name.

* Arguments
The method can not accept any arguments. The method should be no-arg.
------------------------------------------------------
* Special Note about Destroy Lifecycle and Prototype Scope
There is a subtle point you need to be aware of with "prototype" scoped beans.

For "prototype" scoped beans, Spring does not call the destroy method.  Gasp!  



---

In contrast to the other scopes, Spring does not manage the complete lifecycle of a prototype bean: the container instantiates, configures, and otherwise assembles a prototype object, and hands it to the client, with no further record of that prototype instance.

Thus, although initialization lifecycle callback methods are called on all objects regardless of scope, in the case of prototypes, configured destruction lifecycle callbacks are not called. The client code must clean up prototype-scoped objects and release expensive resources that the prototype bean(s) are holding. 



---

This also applies to both XML configuration and Annotation-based configuration.



---

QUESTION: How can I create code to call the destroy method on prototype scope beans



ANSWER:

You can destroy prototype beans but custom coding is required.

You can download the example source code from here: destroy-prototype-scope-bean-with-custom-processor-xml-config.zip



Development Process

1. Create a custom bean processor. This bean processor will keep track of prototype scoped beans. During shutdown it will call the destroy() method on the prototype scoped beans. The custom processor is configured in the spring config file.



	<!-- Bean custom processor to handle calling destroy methods on prototype scoped beans -->
        <bean id="customProcessor"
    		class="com.luv2code.springdemo.MyCustomBeanProcessor">
   	</bean>




2. The prototype scoped beans MUST implement the DisposableBean interface. This interface defines a "destory()" method.



public class TrackCoach implements Coach, DisposableBean {
 
	...
	
	// add a destroy method
	@Override
	public void destroy() throws Exception {
		System.out.println("TrackCoach: inside method doMyCleanupStuffYoYo");		
	}
 
}




3. The spring configuration must be updated to use the destroy-method of "destroy".



 	<bean id="myCoach"
 		class="com.luv2code.springdemo.TrackCoach"
 		init-method="doMyStartupStuff"
 		destroy-method="destroy"
 		scope="prototype">	
 		
 		<!-- set up constructor injection -->
 		<constructor-arg ref="myFortuneService" />
 	</bean>




4. In this app, BeanLifeCycleDemoApp.java is the main program.  TrackCoach.java is the prototype scoped bean. TrackCoach implements the DisposableBean interface and provides the destroy() method. The custom bean processing is handled in the MyCustomBeanProcessor class.
