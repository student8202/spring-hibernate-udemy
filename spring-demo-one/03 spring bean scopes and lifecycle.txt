1. Bean Scopes
	* Scope refers to the lifecycle of a bean
	* How long does the bean live?
	* How may instances are created?
	* How is the bean shared?
So by default, the scope is singleton.
---------------------------------------------
* What is a Singleton?
	1. Spring container creates only one instance of the bean, by default
	2. It is cached in memory
	3. All request for the bean
	* will return a SHARED reference to the SAME bean
---------------------------------------------
* Additional Spring Bean Scopes
	1. singleton (create a single shared instance of the bean)
	2. prototype (create a new bean instance for each container request)
	2. request, session, global-session (only used for web apps)
---------------------------------------------
* Bean Lifecycle
Container started -> Bean instantiated -> Dependencies Injected -> Internal Spring Processing 
-> Your Custom Init Method -> Bean Is ready for use/Container Is Shutdown
-> Your Custom Destroy Method -> Stop
------------------------------------------------------
* Bean Licycle Methods / Hooks
	1. You can add custom code during ***bean initalization
	init-method="doMyStartupStuff"
	2. Calling custom business logic methods
	3. Setting up handles to resources (db, socket, file, etc)
	1. You can add custom code during ***bean destruction
	destroy-method="doMyCleanupStuff"
	2. Calling custom business logic method
	3. Clean up handles to resources (db, socket, file, etc)
------------------------------------------------
* Development Process
	1. Define you methods for init and destroy
	2. Configure the method names in Spring config file
------------------------------------------------------
* Special Note about init and destroy Method Signatures

When using XML configuration, I want to provide additional details regarding the method signatures of the init-method  and destroy-method .

* Access modifier
The method can have any access modifier (public, protected, private)

* Return type
The method can have any return type. However, "void' is most commonly used. If you give a return type just note that you will not be able to capture the return value. As a result, "void" is commonly used.

* Method name
The method can have any method name.

* Arguments
The method can not accept any arguments. The method should be no-arg.
