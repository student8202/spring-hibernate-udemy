1. Bean Scopes
	* Scope refers to the lifecycle of a bean
	* How long does the bean live?
	* How may instances are created?
	* How is the bean shared?
So by default, the scope is singleton.
---------------------------------------------
* What is a Singleton?
	1. Spring container creates only one instance of the bean, by default
	2. It is cached in memory
	3. All request for the bean
	* will return a SHARED reference to the SAME bean
---------------------------------------------
* Additional Spring Bean Scopes
	1. singleton (create a single shared instance of the bean)
	2. prototype (create a new bean instance for each container request)
	2. request, session, global-session (only used for web apps)
---------------------------------------------
* The Spring Framework will perform operations behind the scenes for you
Explain: When Spring Container run -> applicationContext.xml ->
every beans will run step by step -> create the object (bean) and so on
	
	<!-- step 1 instance object -->
	<bean id="myFortuneService"
		class="com.hcode.springdemo.HappyFortuneService">
	</bean>
	<!-- step 2 inject another object by constructor -->
	<bean id="myCoach"
		class="com.hcode.springdemo.BaseballCoach">
		<constructor-arg ref="myFortuneService"/>
	</bean>
	
	1. instance object:
	HappyFortuneService myFortuneService = new HappyFortuneService();
	2. inject another object by constructor
	BaseballCoach myCoach = new BaseballCoach(myFortuneService);
------------------------------------------------------
FAQ: What is the purpose for the no arg constructor?



Question:
I was wondering why you created a no arg constructor? I thought that they are implied by Java and only required when you also have an overloaded constructor. Or is this a Spring specific thing?

---


Answered by: Oleksandr Palamarchuk

When you don’t define any constructor in your class, compiler defines default one for you, however when you declare any constructor (in your example you have already defined a parameterized constructor), compiler doesn’t do it for you.

Since you have defined a constructor in class code, compiler didn’t create default one. While creating object you are invoking default one, which doesn’t exist in class code. Then the code gives an compilation error.

------------------------------------------------
* Inside class: copy qualified name (get class package)
